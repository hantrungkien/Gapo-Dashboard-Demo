// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'dependencies.gradle'

buildscript {
    apply from: rootProject.file("dependencies.gradle")

    ext {
        debuggable_release = false
    }

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath deps.gradle_plugins.android
        classpath deps.gradle_plugins.kotlin
        classpath deps.gradle_plugins.deploygate
        classpath deps.gradle_plugins.ktlint
        classpath deps.gradle_plugins.detekt

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply from: "$rootDir/detekt.gradle"

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'http://repo.brightcove.com/releases' }
        maven { url 'https://dl.bintray.com/sysdata/maven' }
        maven { url 'http://repo.pageturner-reader.org' }
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        mavenCentral()
    }

    def ext = rootProject.extensions.getByName("ext")

    configurations.all {
        resolutionStrategy {
            //failOnVersionConflict()
            force "io.reactivex.rxjava2:rxjava:${ext.versions.rxJava2}"
            force "io.reactivex.rxjava2:rxandroid:${ext.versions.rxAndroid2}"
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.jetbrains.kotlinx') {
                    if (details.requested.name.contains('coroutines')) {
                        details.useVersion "${ext.versions.coroutines}"
                    }
                }
                if (details.requested.group == 'com.squareup.moshi') {
                    details.useVersion "${ext.versions.moshi}"
                }
                if (details.requested.group == 'com.squareup.okhttp3') {
                    details.useVersion "${ext.versions.okhttp3}"
                }
                if (details.requested.name == 'kotlin-stdlib-jdk8'
                        || details.requested.name == 'kotlin-stdlib-jdk7'
                        || details.requested.name == 'kotlin-reflect'
                        || details.requested.name == 'kotlin-stdlib-common') {
                    details.useVersion "${ext.versions.kotlin}"
                }
            }
        }
    }
}

subprojects {
    ktlint {
        debug = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental", "-Xjvm-default=enable"]
        jvmTarget = "1.8"
    }
}

task detektProjectBaseline(type: io.gitlab.arturbosch.detekt.DetektCreateBaselineTask) {
    description = "Overrides current baseline."
    ignoreFailures.set(true)
    parallel.set(true)
    buildUponDefaultConfig.set(true)
    setSource(files(
            "$rootDir/src/main",
            "$rootDir/src/test"
    ))
    config.setFrom(files(detekt_config))
    baseline.set(file(detekt_baseline_config))
    include("**/*.kt")
    include("**/*.kts")
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
